#! /usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import print_function

import json
import os
import os.path as osp
import subprocess
import sys
import tempfile

# Find casa_distro module path relatively to this file according to source
# files organization. Adds it to the begining of sys.path if found.
ppath = osp.join(osp.dirname(osp.dirname(osp.realpath(__file__))), 'python')
if osp.exists(osp.join(ppath, 'casa_distro', '__init__.py')):
    sys.path.insert(0, ppath)
del ppath

try:
    import casa_distro
except ImportError:
    sys.path.append(osp.join(osp.dirname(osp.dirname(osp.realpath(__file__))),
                             'python'))
    import casa_distro


class Installer:
    '''
    class to read image build files and run them locally
    '''

    def __init__(self, log_file, user='brainvisa'):
        self.name = 'local machine'
        self.user = user
        self.log_file = log_file
        if not osp.exists(self.log_file):
            self.log = {}

    def run_user(self, command):
        '''
        Run a shell command in VM as self.user
        '''
        subprocess.check_call(['sudo', '-u', self.user, 'sh', '-c', command])

    def run_root(self, command):
        '''
        Run a shell command in VM as root
        '''
        subprocess.check_call(['sh', '-c', 'umask 0022 && ' + command])

    def copy_root(self, source_file, dest_dir):
        '''
        Copy a file as root
        '''
        self.run_root("cp -r '{}' '{}'".format(source_file, dest_dir))

    def copy_user(self, source, dest_dir):
        '''
        Copy a file or a directory in VM as self.user
        '''
        self.run_user("cp -r '{}' '{}'".format(source, dest_dir))

    def perform_step(self, build_file, step_name):
        if os.getuid() != 0:
            print('ERROR: This command must be executed as root')
            sys.exit(1)

        builder = self.get_builder(build_file)
        for step in builder.steps:
            if step.__name__ == step_name:
                break
        else:
            raise ValueError('Image builder "{}" '
                             'has no "{}" step'.format(builder.name,
                                                       step_name))

        log = tempfile.NamedTemporaryFile()
        stdout = sys.stdout
        stderr = sys.stderr
        sys.stderr = sys.stdout = log
        try:
            step(osp.dirname(build_file), builder)
        finally:
            sys.stderr = stderr
            sys.stdout = stdout
            log.flush()
            self.log.setdefault(builder.name, {})[step.__name__] = \
                {'output': open(log.name, 'r').read()}
            json.dump(open(self.log_file, 'w'))

    def get_builder(self, build_file):
        v = {}
        exec(compile(open(build_file, "rb").read(),
             build_file, 'exec'), v, v)
        if 'builder' not in v:
            raise RuntimeError(
                'No builder object defined in {0}'.format(build_file))
        return v['builder']


log_file = '/tmp/casa_local_install.log'
installer = Installer(log_file=log_file)

for builder_name, steps in installer.log.items():
    for step_name in steps:
        print(builder_name, '/', step_name, 'done')

builder = None
if len(sys.argv) > 1:
    type = sys.argv[1]
    build_file = osp.join(osp.dirname(osp.dirname(osp.dirname(
        casa_distro.__file__))),
        'share', 'docker', 'casa-{}'.format(type),
        'ubuntu-18.04', 'build_image.py')
    builder = installer.get_builder(build_file)
    steps_todo = [i for i in (j.__name__ for j in builder.steps)
                  if i not in installer.log.get(type, {})]
    for step_name in steps_todo:
        print(builder.name, '/', step_name, 'todo')

if len(sys.argv) > 2:
    step_name = sys.argv[2]
    if step_name == 'next':
        step_name = steps_todo[0]
    print('Performing', builder.name, '/', step_name)
    installer.perform_step(build_file, step_name)
