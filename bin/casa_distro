#! /usr/bin/env python

from __future__ import print_function

import argparse
from getpass import getpass
import sys
import zipfile
import tempfile
import shutil
import os
import os.path as osp
import inspect

commands = []
def command(f):
    global commands
    commands.append(f.__name__)
    return f

default_build_workflow_repository = os.environ.get('CASA_DEFAULT_REPOSITORY')
if not default_build_workflow_repository:
    default_build_workflow_repository = osp.expanduser('~/casa_distro')
default_repository_server = 'brainvisa.info'
default_repository_server_directory = 'prod/www/casa-distro'
default_repository_login = 'brainvisa'
default_distro = 'opensource'
default_branch = 'latest_release'
default_system = 'ubuntu-12.04'

@command
def package_casa_distro(build_workflows_repository=default_build_workflow_repository):
    '''Create a casa_distro.zip containing a usable version of casa_distro'''
    import casa_distro
    import brainvisa.maker
    import tempfile
    import shutil
    import zipfile
    import os
    import os.path as osp
    from fnmatch import fnmatch
    
    from casa_distro.info import __version__ as casa_distro_version

    dirs = {
        osp.dirname(casa_distro.__file__): ('casa_distro', '*.py'),
        osp.dirname(brainvisa.maker.__file__): ('brainvisa/maker', '*.py'),
        casa_distro.share_directory: ('share', None),
    }
    tmp = tempfile.mkdtemp()
    try:
        # Copy files in temporary directory
        os.mkdir(osp.join(tmp,'brainvisa'))
        open(osp.join(tmp, 'brainvisa', '__init__.py'), 'w')
        shutil.copy(__file__, osp.join(tmp, '__main__.py'))
        for srcdir, dstdir_filter in dirs.items():
            dstdir, filter = dstdir_filter
            os.mkdir(osp.join(tmp, dstdir))
            len_srcdir = len(srcdir) + 1
            for dirpath, dirnames, filenames in os.walk(srcdir):
                zipdir = osp.join(dstdir, dirpath[len_srcdir:])
                for i in dirnames:
                    os.mkdir(osp.join(tmp, zipdir, i))
                for i in filenames:
                    if not filter or fnmatch(i, filter):
                        shutil.copy(osp.join(dirpath, i), osp.join(tmp, zipdir, i))

        # Create zip archive of temporary directory
        with zipfile.ZipFile(osp.join(build_workflows_repository, 'casa_distro-%s.zip' % casa_distro_version), mode='w') as zip:
            len_tmp = len(tmp)+1
            for dirpath, dirnames, filenames in os.walk(tmp):
                zipdir = dirpath[len_tmp:]
                for i in filenames:
                    f = zip.write(osp.join(dirpath,i), osp.join(zipdir,i))
    finally:
        shutil.rmtree(tmp)

@command
def publish_casa_distro(build_workflows_repository=default_build_workflow_repository, 
                        repository_server=default_repository_server, 
                        repository_server_directory=default_repository_server_directory,
                        login=default_repository_login, verbose=None):
    '''Publish casa_distro.zip file previously created with package_casa_distro to the sftp server'''
    from subprocess import check_call
    
    from casa_distro.info import __version__ as casa_distro_version
    
    
    lftp_script = tempfile.NamedTemporaryFile()
    if login:
        remote = 'sftp://%s@%s' % (login, repository_server)
    else:
        remote = 'sftp://%s' % repository_server
    print('connect', remote, file=lftp_script)
    print('cd', repository_server_directory, file=lftp_script)
            
    print('put %s/casa_distro-%s.zip' % (build_workflows_repository, casa_distro_version), file=lftp_script)
    print('rm -f casa_distro.zip', file=lftp_script)
    print('ln -s casa_distro-%s.zip casa_distro.zip' % casa_distro_version, file=lftp_script)
    lftp_script.flush()
    cmd = ['lftp', '-f', lftp_script.name]
    if verbose:
        print('Running', *cmd, file=verbose)
        print('-' * 10, lftp_script.name, '-'*10, file=verbose)
        print(open(lftp_script.name).read(), file=verbose)
        print('-'*40, file=verbose)
    check_call(cmd)
    

@command
def create_release_plan(components=None, build_workflows_repository=default_build_workflow_repository, verbose=None):
    '''create a release plan file by reading sources.'''
    from casa_distro.bv_maker import inspect_components_and_create_release_plan
    import yaml # TODO move related code into bv_maker.py
    
    if components:
        components = components.split(',')
    release_plan_file = open(osp.join(build_workflows_repository, 'release_plan.yaml'), 'w')
    release_plan = inspect_components_and_create_release_plan(components, verbose=verbose)
    print(yaml.dump(release_plan, default_flow_style=False), file=release_plan_file)


@command
def publish_release_plan(login=None, password=None, build_workflows_repository=default_build_workflow_repository, verbose=None):
    '''send information to the CASA forum about things that would be done with the release plan file'''
    from casa_distro.bv_maker import publish_release_plan_on_wiki
    if password is None:
        password = getpass('BioProj password for %s: ' % login)
    release_plan_file = osp.join(build_workflows_repository, 'release_plan.yaml')
    publish_release_plan_on_wiki(login, password, release_plan_file)


@command
def apply_release_plan(build_workflows_repository=default_build_workflow_repository, dry=None, ignore_warning = False, verbose=None):
    '''apply actions defined in release plan file'''
    import os, types
    from distutils.util import strtobool
    from casa_distro.bv_maker import FailOn, apply_release_plan
    
    try:
        if type(dry) in (types.StringType, types.UnicodeType):
            dry = bool(strtobool(dry))

        else:
            dry = bool(dry)
    except:
        print('dry argument must contain a value convertible to boolean', 
              file = sys.stderr)
        sys.exit(1)

    try:
        if type(ignore_warning) in (types.StringType, types.UnicodeType):
            ignore_warning = bool(strtobool(ignore_warning))

        else:
            ignore_warning = bool(ignore_warning)
    except:
        print('ignore_warning argument must contain a value convertible to',
              'boolean', file = sys.stderr)
        sys.exit(1)
    
    
    release_plan_file = osp.join(build_workflows_repository, 
                                 'release_plan.yaml')
        
    try:
        fail_on = FailOn.ERROR
        fail_on |= FailOn.NONE if ignore_warning else FailOn.WARNING
        
        apply_release_plan(release_plan_file, dry, fail_on, verbose)
        
    except RuntimeError, e:
        print('Impossible to apply release plan.', e.message,
              file = sys.stderr)
        sys.exit(1)
        
@command
def create_docker(image_names = '*', verbose=None):
    '''create or update all casa-test and casa-dev docker images'''
    from casa_distro.docker import create_docker_images
    
    image_name_filters = image_names.split(',')
    create_docker_images(
        image_name_filters = image_name_filters)


@command
def publish_docker(image_names = '*', verbose=None):
    '''publish docker images on dockerhub.com for public images or sandbox.brainvisa.info for private images'''
    from casa_distro.docker import publish_docker_images
    image_name_filters = image_names.split(',')
    publish_docker_images(
        image_name_filters = image_name_filters)


@command
def create_build_workflow(distro=default_distro, branch=default_branch, 
                          system=None, download=False, 
                          not_override='bv_maker.cfg,svn.secret', 
                          build_workflows_repository=default_build_workflow_repository,
                          verbose=None):
    '''create a new build workflow directory in a repository of build workflows'''
    from casa_distro.docker import create_build_workflow
    if download:
        print('ERROR: download option of create_build_workflow is not implemented', file=sys.stderr)
        sys.exit(1)
    else:
        not_override_lst = not_override.split(',')
        create_build_workflow(build_workflows_repository, distro=distro, 
                              branch=branch, system=system, 
                              not_override=not_override_lst,
                              verbose=verbose)


@command
def list_build_workflows(distro='*', branch='*', system='*', 
                         build_workflows_repository=default_build_workflow_repository,
                         verbose=None):
    '''List (eventually selected) build workflows created by create_build_workflow.'''
    from casa_distro import iter_build_workflow
    
    for d, b, s, bwf_dir in iter_build_workflow(build_workflows_repository, distro=distro, branch=branch, system=system):
        print('distro=%s' % d,'branch=%s' % b, 'system=%s' % s)
        print('  directory:', bwf_dir)

@command
def pull_build_workflows(distro='*', branch='*', system='*', 
                         build_workflows_repository=default_build_workflow_repository, 
                         repository_server=default_repository_server, 
                         repository_server_directory=default_repository_server_directory,
                         login=default_repository_login, verbose=None):
    '''Download a build workflow (except conf directory) from sftp server (require lftp command to be installed).'''
    from subprocess import check_call
    from casa_distro import iter_build_workflow
    
    lftp_script = tempfile.NamedTemporaryFile()
    if login:
        remote = 'sftp://%s@%s' % (login, repository_server)
    else:
        remote = 'sftp://%s' % repository_server
    print('connect', remote, file=lftp_script)
    print('cd', repository_server_directory, file=lftp_script)
    for d, b, s, bwf_dir in iter_build_workflow(build_workflows_repository, distro=distro, branch=branch, system=system):
        relative_bwf_dir = bwf_dir[len(build_workflows_repository)+1:]
        for d in ('src', 'build', 'install', 'pack'):
            cmd = ['mirror', osp.join(relative_bwf_dir,d), osp.join(bwf_dir,d)]
            if verbose:
                cmd.insert(2, '-v')
            print(*cmd, file=lftp_script)
    lftp_script.flush()
    cmd = ['lftp', '-f', lftp_script.name]
    if verbose:
        print('Running', *cmd, file=verbose)
        print('-' * 10, lftp_script.name, '-'*10, file=verbose)
        print(open(lftp_script.name).read(), file=verbose)
        print('-'*40, file=verbose)
    check_call(cmd)


@command
def publish_build_workflows(distro='*', branch='*', system='*', 
                            build_workflows_repository=default_build_workflow_repository, 
                            repository_server=default_repository_server, 
                            repository_server_directory=default_repository_server_directory,
                            login=default_repository_login, verbose=None):
    '''Upload a build workflow to sftp server (require lftp command to be installed).'''
    
    from subprocess import check_call
    from casa_distro import iter_build_workflow
    
    lftp_script = tempfile.NamedTemporaryFile()
    if login:
        remote = 'sftp://%s@%s' % (login, repository_server)
    else:
        remote = 'sftp://%s' % repository_server
    print('connect', remote, file=lftp_script)
    print('cd', repository_server_directory, file=lftp_script)
    for d, b, s, bwf_dir in iter_build_workflow(build_workflows_repository, distro=distro, branch=branch, system=system):
        relative_bwf_dir = bwf_dir[len(build_workflows_repository)+1:]
        
        cmd = ['mirror', '-R', '--delete', bwf_dir, relative_bwf_dir]
        if verbose:
            cmd.insert(2, '-v')
        print(*cmd, file=lftp_script)
    lftp_script.flush()
    cmd = ['lftp', '-f', lftp_script.name]
    if verbose:
        print('Running', *cmd, file=verbose)
        print('-' * 10, lftp_script.name, '-'*10, file=verbose)
        print(open(lftp_script.name).read(), file=verbose)
        print('-'*40, file=verbose)
    check_call(cmd)

@command
def shell(distro='*', branch='*', system='*',
          build_workflows_repository=default_build_workflow_repository,
          X=False, docker_rm=True, args_list=[]):
    '''Start a bash shell in Docker with the given repository configuration.'''
    from casa_distro.docker import run_docker_shell
    from casa_distro import iter_build_workflow
    
    build_workflows = list(iter_build_workflow(build_workflows_repository, 
                                               distro=distro, 
                                               branch=branch, 
                                               system=system))
    if not build_workflows:
        print('Cannot find any build workflow', file=sys.stderr)
        return 1
    if len(build_workflows) > 1:
        print('Several build workflows found, you can select only one by giving values for distro, system and branch', file=sys.stderr)
        return 1
    distro, branch, system, bwf_dir = build_workflows[0]
    run_docker_shell(build_workflows_repository, distro=distro, branch=branch,
                     system=system, X=X, docker_rm=docker_rm, 
                     args_list=args_list)

@command
def bv_maker(distro='*', branch='*', system='*',
             build_workflows_repository=default_build_workflow_repository,
             X=False, docker_rm=True, args_list=[]):
    '''Start bv_maker in Docker for all the selected build workflows (by default, all created build workflows).'''
    from casa_distro.docker import run_docker_bv_maker
    from casa_distro import iter_build_workflow
    from subprocess import CalledProcessError
    from traceback import format_exc
    import time
    import six

    class ExecutionStatus:
        status_map = {'not run': '',
                      'succeeded': 'OK         ',
                      'failed': 'FAILED     ',
                      'interrupted': 'INTERRUPTED'}
        
        def __init__(self,
                     error_code = None, 
                     exception = None, 
                     status = 'not run',
                     start_time = None,
                     stop_time = None):
            self.error_code = error_code
            self.exception = exception
            self.status = status
            self.start_time = start_time
            self.stop_time = stop_time
            
        def get_status_mapped(self):
            return self.status_map.get(self.status)
            
    status = {}
    global_failed = False

    for d, b, s, bwf_dir in iter_build_workflow(build_workflows_repository, 
                                                distro=distro, branch=branch, 
                                                system=system):
        es = ExecutionStatus(start_time = time.localtime())
        status[(d, b, s)] = (es, bwf_dir)
        try:
            run_docker_bv_maker(build_workflows_repository, distro=d,
                                branch=b, system=s, X=X, docker_rm=docker_rm,
                                args_list=args_list)
            es.stop_time = time.localtime()
            es.error_code = 0
            es.status = 'succeeded'
        
        except CalledProcessError:
            es.stop_time = time.localtime()
            es.exception = format_exc()
            es.error_code = 1
            es.status = 'failed'
            
        except KeyboardInterrupt:
            es.stop_time = time.localtime()
            es.error_code = 1
            es.status = 'interrupted'
            break
            
    # Display summary
    sys.stdout.flush()
    sys.stderr.flush()
    messages = ['\ncasa_distro summary:']
    print(messages[0])

    first_start = None
    last_stop = None
    for (d, b, s), (es, bwf_dir) in six.iteritems(status):
        status = es.get_status_mapped()
        if status != '':
            message = '%s workflow %s %s %s: %s' % (status, d, b, s, bwf_dir)
            start = es.start_time
            if start:
                if first_start is None:
                    first_start = start
                message += ', started: %04d/%02d/%02d %02d:%02d' \
                    % start[:5]
            stop = es.stop_time
            if stop:
                last_stop = stop
                message += ', stopped: %04d/%02d/%02d %02d:%02d' \
                    % stop[:5]
            messages.append(message)
            print(message)
            if es.error_code:
                global_failed = True
    
    if global_failed:
        status = 'There were errors.'
        print(status)
    else:
        status = 'All went good.'
        print(status)
        
    return global_failed

@command
def run(distro='*', branch='*', system='*',
        build_workflows_repository=default_build_workflow_repository,
        X=False, docker_rm=True, args_list=[]):
    '''Start any command in Docker with the given repository configuration.
Command and args should be specified after --:
    casa_distro -r /home/casa run branch=bug_fix ls -als /casa'''
    from casa_distro.docker import run_docker
    from casa_distro import iter_build_workflow
    
    build_workflows = list(iter_build_workflow(build_workflows_repository, 
                                               distro=distro, 
                                               branch=branch, 
                                               system=system))
    if not build_workflows:
        print('Cannot find any build workflow', file=sys.stderr)
        return 1
    if len(build_workflows) > 1:
        print('Several build workflows found, you can select only one by giving values for distro, system and branch', file=sys.stderr)
        return 1
    distro, branch, system, bwf_dir = build_workflows[0]
    
    run_docker(build_workflows_repository, distro=distro, branch=branch, 
               system=system, X=X, docker_rm=docker_rm, docker_options=[], 
               args_list=args_list)


@command
def help(args_list=['help'], **kwargs):
    '''print help about a command'''
    
    command_set = set(args_list)
    if 'command' in kwargs:
        command_set.add(kwargs['command'])
    
    if len(command_set) == 0:
        parser.print_help()
        return
    
    for command in command_set:
        command_help = globals()[command].__doc__

        #print('{s:{c}^{n}}'.format(s=' %s ' % command, n=80, c='-'))
        print()
        print(command)
        print('-' * len(command))
        print(command_help)
        cargs = inspect.getargspec(globals()[command])
        if cargs.args:
            print()
            print('options:')
            print()
#            print('---------------------------')
            for i, arg in enumerate(cargs.args):
                if cargs.defaults is not None and len(cargs.defaults) > i:
                    print(' ' * 3, arg, '(default', '=', cargs.defaults[i], ')')
                else:
                    print(' ' * 3, arg)
        print()
       
if __name__ == '__main__':
    
    class ArgumentLineBreakFormatter(argparse.HelpFormatter):
        def _split_lines(self, text, width):
            result = []
            lines = text.split('\n')
            for line in lines:
                if line:
                    result.extend(super(ArgumentLineBreakFormatter, self)._split_lines(line, width))
                else:
                    result.append('')
            return result

    args_list = []
    if '--' in sys.argv:
        ind = sys.argv.index('--')
        args_list = sys.argv[ind + 1:]
        sys.argv = sys.argv[:ind]

    parser = argparse.ArgumentParser(description='Casa distribution creation tool',
                                     formatter_class=ArgumentLineBreakFormatter)

    parser.add_argument('-r', '--repository', default=None,
                        help='Path of the directory containing build workflow (default=/neurospin/cati/casa_distro)')
    parser.add_argument('-v', '--verbose', action='store_true',
                        help='Display information during processing')
    parser.add_argument('command', nargs=1, choices=commands,
                        help='\n\n'.join('"%s": %s;\n\n' % (i, globals()[i].__doc__) for i in commands))
    parser.add_argument('command_options', nargs=argparse.REMAINDER,
                        help='command specific options (use help <command> to list these options).')
    options = parser.parse_args()

    tmp_share = None
    result = None
    try:
        # Manage share directory in Zip file distribution
        if not osp.exists(__file__) and osp.dirname(__file__).endswith('.zip'):
            tmp_share = tempfile.mkdtemp()
            with zipfile.ZipFile(osp.dirname(__file__)) as zip:
                for i in zip.namelist():
                    if i.startswith('share'):
                        zip.extract(i, tmp_share)
            import casa_distro
            casa_distro.share_directory = osp.join(tmp_share, 'share')

        args = []
        kwargs = {}
        
        command = globals()[options.command[0]]
        
        # Get command argument specification
        cargs = inspect.getargspec(command)

        if options.repository:
            kwargs['build_workflows_repository'] = options.repository
            
        if options.verbose and 'verbose' in cargs.args:
            kwargs['verbose'] = sys.stdout
            
        for i in options.command_options:
            l = i.split('=', 1)
            if len(l) == 2:
                kwargs[l[0]] = l[1]
            else:
                args.append(i)
        
        if 'args_list' in cargs.args:
            kwargs['args_list'] = args + args_list

        result = command(**kwargs)
        
    finally:
        if tmp_share:
            shutil.rmtree(tmp_share)
    sys.exit(result)