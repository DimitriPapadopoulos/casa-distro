#! /usr/bin/env python

from __future__ import print_function

import argparse
from getpass import getpass
import sys
import zipfile
import tempfile
import shutil
import os.path as osp

commands = []
def command(f):
    global commands
    commands.append(f.__name__)
    return f

default_build_workflow_repository = '/neurospin/cati/Users/cointepas/casa_distro'


@command
def package_casa_distro(build_workflows_repository=default_build_workflow_repository):
    '''Create a casa_distro.zip containing a usable version of casa_distro'''
    import casa_distro
    import brainvisa.maker
    import tempfile
    import shutil
    import zipfile
    import os
    import os.path as osp
    from fnmatch import fnmatch
    dirs = {
        osp.dirname(casa_distro.__file__): ('casa_distro', '*.py'),
        osp.dirname(brainvisa.maker.__file__): ('brainvisa/maker', '*.py'),
        casa_distro.share_directory: ('share', None),
    }
    tmp = tempfile.mkdtemp()
    try:
        # Copy files in temporary directory
        os.mkdir(osp.join(tmp,'brainvisa'))
        open(osp.join(tmp, 'brainvisa', '__init__.py'), 'w')
        shutil.copy(__file__, osp.join(tmp, '__main__.py'))
        for srcdir, dstdir_filter in dirs.items():
            dstdir, filter = dstdir_filter
            os.mkdir(osp.join(tmp, dstdir))
            len_srcdir = len(srcdir) + 1
            for dirpath, dirnames, filenames in os.walk(srcdir):
                zipdir = osp.join(dstdir, dirpath[len_srcdir:])
                for i in dirnames:
                    os.mkdir(osp.join(tmp, zipdir, i))
                for i in filenames:
                    if not filter or fnmatch(i, filter):
                        shutil.copy(osp.join(dirpath, i), osp.join(tmp, zipdir, i))

        # Create zip archive of temporary directory
        with zipfile.ZipFile(osp.join(build_workflows_repository, 'casa_distro.zip'), mode='w') as zip:
            len_tmp = len(tmp)+1
            for dirpath, dirnames, filenames in os.walk(tmp):
                zipdir = dirpath[len_tmp:]
                for i in filenames:
                    f = zip.write(osp.join(dirpath,i), osp.join(zipdir,i))
    finally:
        shutil.rmtree(tmp)

@command
def create_release_plan(components=None, build_workflows_repository=default_build_workflow_repository, verbose=None):
    '''create a release plan file by reading sources.'''
    from casa_distro.bv_maker import inspect_components_and_create_release_plan
    import yaml # TODO move related code into bv_maker.py
    
    if components:
        components = components.split(',')
    release_plan_file = open(osp.join(build_workflows_repository, 'release_plan.yaml'), 'w')
    release_plan = inspect_components_and_create_release_plan(components, verbose=verbose)
    print(yaml.dump(release_plan, default_flow_style=False), file=release_plan_file)


@command
def publish_release_plan(login, password=None, build_workflows_repository=default_build_workflow_repository, verbose=None):
    '''send information to the CASA forum about things that would be done with the release plan file'''
    from casa_distro.bv_maker import publish_release_plan_on_wiki
    if password is None:
        password = getpass('BioProj password for %s: ' % login)
    release_plan_file = osp.join(build_workflows_repository, 'release_plan.yaml')
    publish_release_plan_on_wiki(login, password, release_plan_file)


@command
def apply_release_plan(login, password=None, build_workflows_repository=default_build_workflow_repository, verbose=None):
    '''apply actions defined in release plan file'''
    print('ERROR: command cmd_apply_release_plan is not implemented', file=sys.stderr)
    sys.exit(1)


@command
def create_docker(verbose=None):
    '''create or update all casa-test and casa-dev docker images'''
    from casa_distro.docker import create_docker_images
    create_docker_images()


@command
def publish_docker(verbose=None):
    '''publish docker images on dockerhub.com for public images or sandbox.brainvisa.info for private images'''
    from casa_distro.docker import publish_docker_images
    publish_docker_images()


@command
def create_build_workflow(distro='opensource', branch='latest_release', system=None, download=False, build_workflows_repository=default_build_workflow_repository, verbose=None):
    '''create a new build workflow directory in a repository of build workflows'''
    from casa_distro.docker import create_build_workflow
    create_build_workflow(build_workflows_repository, distro=distro, branch=branch, system=system)


@command
def pull_build_workflow(distro='opensource', branch='latest_release', system=None, build_workflows_repository=default_build_workflow_repository, verbose=None):
    '''Download a build workflow (except conf directory) from ssh://catidev.cea.fr/casa_distro.'''
    print('ERROR: command pull_build_workflow is not implemented', file=sys.stderr)
    sys.exit(1)

@command
def upload_build_workflow(distro='opensource', branch='latest_release', system=None, build_workflows_repository=default_build_workflow_repository, verbose=None):
    '''Upload a build workflow to ssh://catidev.cea.fr/casa_distro.'''
    print('ERROR: command push_build_workflow is not implemented', file=sys.stderr)
    sys.exit(1)

@command
def shell(distro='opensource', branch='latest_release', system=None, build_workflows_repository=default_build_workflow_repository, verbose=None):
    '''Download a build workflow (except conf directory) from ssh://catidev.cea.fr/casa_distro.'''
    print('ERROR: command shell is not implemented', file=sys.stderr)
    sys.exit(1)


@command
def help(command):
    '''print help about a command'''
    command_help = globals()[command].__doc__
    print(command_help)

if __name__ == '__main__':    
    class ArgumentLineBreakFormatter(argparse.HelpFormatter):
        def _split_lines(self, text, width):
            result = []
            lines = text.split('\n')
            for line in lines:
                if line:
                    result.extend(super(ArgumentLineBreakFormatter, self)._split_lines(line, width))
                else:
                    result.append('')
            return result

    parser = argparse.ArgumentParser(description='Casa distribution creation tool',
                                     formatter_class=ArgumentLineBreakFormatter)

    parser.add_argument('-r', '--repository', default=None,
                        help='Path of the directory containing build workflow (default=/neurospin/cati/casa_distro)')
    parser.add_argument('-v', '--verbose', action='store_true',
                        help='Display information during processing')
    parser.add_argument('command', nargs=1, choices=commands,
                        help='\n\n'.join('"%s": %s;\n\n' % (i, globals()[i].__doc__) for i in commands))
    parser.add_argument('command_options', nargs='*',
                        help='command specific options (use help <command> to list these options).')
    options = parser.parse_args()

    tmp_share = None
    try:
        # Manage share directory in Zip file distribution
        if not osp.exists(__file__) and osp.dirname(__file__).endswith('.zip'):
            tmp_share = tempfile.mkdtemp()
            with zipfile.ZipFile(osp.dirname(__file__)) as zip:
                for i in zip.namelist():
                    if i.startswith('share'):
                        zip.extract(i, tmp_share)
            import casa_distro
            casa_distro.share_directory = osp.join(tmp_share, 'share')
        
        command = globals()[options.command[0]]
        args = []
        kwargs = {}
        if options.verbose:
            kwargs['verbose'] = sys.stdout
        if options.repository:
            kwargs['build_workflows_repository'] = options.repository
        for i in options.command_options:
            l = i.split('=', 1)
            if len(l) == 2:
                kwargs[l[0]] = l[1]
            else:
                args.append(i)
        command(*args, **kwargs)
    finally:
        if tmp_share:
            shutil.rmtree(tmp_share)
