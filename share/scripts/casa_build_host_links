#!/usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import print_function

import os
import sys
osp = os.path

mode = 'build'

casa_install = os.environ.get('CASA_INSTALL')
if casa_install and osp.exists(osp.join(casa_install, 'bin', 'bv_env')):
    # installed binaries exist, use them
    mode = 'install'

if '-h' in sys.argv[1:]:
    print(sys.argv[0], '[-h]')
    print('build run scripts for Casa-distro / BrainVisa executables to ease '
          'their use from outside the container')
    print('''This script should be run from inside a casa-distro container, in a developer environment. It creates a directory /casa/host/host_bin where it will write a script for every executable in the build environment. Each of these scripts can be invoked from *outside the container* and will take care of running the right casa-distro container and call the executable.
    Incidentally the scripts can also be called from inside the container, and in this situation will not run another container but call the executable directly.

    There are 2 modes: "build" and "install", because executables may be found either in the install directory (/casa/host/install/bin) or in the build directory (/casa/host/build/bin) and the scripts have to call one of them. The rule is that if there are any executables in the *install* directory, it will switch to "install" mode, otherwise use the "build" mode.

    The scripts are sh shell scripts, thus to be used from outside the container, the host machine must have a sh/bash shell installed, which is OK on any linux or Mac host, but not necessarily on a Windows host.
''')
    sys.exit(0)

casa_build = os.environ.get('CASA_%s' % mode.upper())
casa_hostdir = os.environ.get('CASA_HOST_DIR')

if not casa_build or not casa_hostdir:
    raise RuntimeError('we don\'t seem to be inside a container, we should.')


exclude_programs = set([
    'python', 'python2', 'python3', 'casa_distro', 'casa_distro_admin',
    'bv_env', 'bv_env.sh', 'bv_env.bat', 'bv_env.py', 'bv_env_host',
    'bv_env_test', 'bv_unenv', 'bv_unenv.sh', 'bv_unit_test',
    'bv_wine_regedit',
])

out_dir = osp.normpath(osp.join(casa_build, '..', 'host_bin'))
print('out_dir:', out_dir)
if not osp.isdir(out_dir):
    os.mkdir(out_dir)

for exe in os.listdir(osp.join(casa_build, 'bin')):
    if exe in exclude_programs:
        print('exclude:', exe)
        continue
    #print(exe)
    out_file = osp.join(out_dir, exe)
    print(out_file)
    with open(out_file, 'w') as f:
        os.chmod(out_file, 0o755)
        print('''#!/bin/sh
directory="$0"
[ -L "$directory" ] && directory="`readlink -f \"$directory\"`"
command="`basename \"$directory\"`"
directory=$(dirname "$directory")
directory="`cd \"$directory\";pwd`"
container_dir=$(dirname "$directory")
casa_env_dir=$(dirname "$container_dir")
casa_distro_dir=$(dirname "$casa_env_dir")
container_dir="$container_dir/%s/bin"
casa_env_name=$(basename $casa_env_dir)
casa_distro="$container_dir/casa_distro"
if [ -x "$casa_distro" -a -z "$CASA_HOST_DIR" ]; then
    exec "$casa_distro" "run" "base_directory=$casa_distro_dir" "name=$casa_env_name" "$container_dir/$command" "$@"
else
    exec "$container_dir/$command" "$@"
fi

''' % mode, file=f)

