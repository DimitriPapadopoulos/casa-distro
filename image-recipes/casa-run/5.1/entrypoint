#!/bin/sh

# the beta of singularity 3.3 for Mac doesn't pass envars in any way
# (no --env option, --home doesn't work, SINGULARITYENV_something vars
# are not transmitted). We work around this using a mount and a bash
# script. Bidouille bidouille... ;)
if [ -f "/casa/start_scripts/init.sh" ]; then
    . /casa/start_scripts/init.sh
fi

# Use the software-only mesa library install in /usr/local/lib as a fallback
# (singularity puts the path to nvidia libraries in LD_LIBRARY_PATH).
LD_LIBRARY_PATH=${LD_LIBRARY_PATH}${LD_LIBRARY_PATH+:}/usr/local/lib
if [ "$SOFTWARE_OPENGL" = "1" ]; then
    LD_LIBRARY_PATH=/usr/local/lib/mesa${LD_LIBRARY_PATH+:}${LD_LIBRARY_PATH}
fi
export LD_LIBRARY_PATH

# Source the environment that is defined in the casa-run and casa-dev images,
# if they exist.
if [ -f /casa/environment.sh ]; then
    . /casa/environment.sh
fi
if [ -f /casa/dev-environment.sh ]; then
    . /casa/dev-environment.sh
fi

# Allow user customizations like in a login shell - singularity runs the
# entrypoint shell as a non-interactive, non-login shell, thus reads no user
# init script; however the host config is not valid here thus is not inherited
# like in a non-login shell. In summary the situation here is similar to a
# login shell.
# Hence we source the user .profile file if it exists.

if [ -f "$HOME/.profile" ]; then
    . "$HOME/.profile"
fi

# This script runs the command passed as arguments in a sub-process.
# This is needed to allow it to receive signals.
# The docker main process (pid 1) does not.
"$@"
